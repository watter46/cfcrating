name: Build and Push Docker Image

on:
  workflow_call:

jobs:
  detect_changes:
    runs-on: ubuntu-latest
    outputs:
      src_changed: ${{ steps.changes.outputs.src }}
      app_changed: ${{ steps.changes.outputs.app }}
      web_changed: ${{ steps.changes.outputs.web }}
      db_changed: ${{ steps.changes.outputs.db }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Detect changes
        id: changes
        uses: dorny/paths-filter@v3
        with:
          filters: |
            src:
              - 'src/**'
            app:
              - 'infra/docker/php/**'
            web:
              - 'infra/docker/nginx/**'
            db:
              - 'infra/docker/mysql/**'
  
  build_and_push:
    needs: detect_changes
    runs-on: ubuntu-latest
    env:
      DOCKER_USERNAME: ${{ vars.DOCKER_USERNAME }}
      DOCKERFILE_PATH_APP: infra/docker/php/Dockerfile
      DOCKERFILE_PATH_WEB: infra/docker/nginx/Dockerfile
      DOCKERFILE_PATH_DB: infra/docker/mysql/Dockerfile
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Decode .env from GitHub Secrets and set environment variables
        run: |
          echo "${{ secrets.ENV }}" | base64 --decode > .env

          while IFS='=' read -r key value; do
            if [[ ! -z "$key" && ! "$key" =~ ^# ]]; then
              echo "::add-mask::$value"
              echo "$key=$value" >> $GITHUB_ENV
            fi
          done < .env
      
      - name: Build Src Container Image
        if: needs.detect_changes.outputs.src_changed == 'true'
        run: |
          docker buildx build \
            --cache-from=type=registry,ref=${DOCKER_USERNAME}/cfcrating-app-${ENV}:cache \
            --cache-to=type=registry,ref=${DOCKER_USERNAME}/cfcrating-app-${ENV}:cache,mode=max \
            --build-arg GID=${GID} \
            --build-arg UID=${UID} \
            --build-arg USER_NAME=${USER_NAME} \
            --target ${ENV} \
            -f ${DOCKERFILE_PATH_APP} \
            -t ${DOCKER_USERNAME}/cfcrating-app-${ENV}:latest \ 
            --push .

      - name: Build App Container Image
        if: needs.detect_changes.outputs.app_changed == 'true'
        run: |
          docker build \
            --build-arg GID=${GID} \
            --build-arg UID=${UID} \
            --build-arg USER_NAME=${USER_NAME} \
            --target ${ENV} \
            -f ${DOCKERFILE_PATH_APP} \
            -t ${DOCKER_USERNAME}/cfcrating-app-${ENV}:latest .

      - name: Push App Container Image
        if: needs.detect_changes.outputs.app_changed == 'true'
        run: |
          docker push ${DOCKER_USERNAME}/cfcrating-app-${ENV}:latest

      - name: Build Web Container Image
        if: needs.detect_changes.outputs.web_changed == 'true'
        run: |
          docker build \
            --build-arg GID=${GID} \
            --build-arg UID=${UID} \
            --target ${ENV} \
            -f ${DOCKERFILE_PATH_WEB} \
            -t ${DOCKER_USERNAME}/cfcrating-web-${ENV}:latest .

      - name: Push Web Container Image
        if: needs.detect_changes.outputs.web_changed == 'true'
        run: |
          docker push ${DOCKER_USERNAME}/cfcrating-web-${ENV}:latest

      - name: Build DB Container Image
        if: needs.detect_changes.outputs.db_changed == 'true'
        run: |
          docker build \
            -f ${DOCKERFILE_PATH_DB} \
            -t ${DOCKER_USERNAME}/cfcrating-db-${ENV}:latest .
  
      - name: Push DB Container Image
        if: needs.detect_changes.outputs.db_changed == 'true'
        run: |
          docker push ${DOCKER_USERNAME}/cfcrating-db-${ENV}:latest